name: Build and Deploy cart microservice

on:
  push:
    branches-ignore: main

env:
    AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    GITHUB_USERNAME: ${{ secrets.GIT_USERNAME }}
    GITHUB_EMAIL: ${{ secrets.GIT_EMAIL }}
    GITHUB_PAT: ${{ secrets.GIT_PAT }}
    ECR_URL: public.ecr.aws/v1g8i1q6 
    AWS_REGION: "ap-south-1"
    AWS_REGION_ECR: "us-east-1"
    IMAGE_NAME: cart-ms
    VERSION_FILE: "version.txt"
    PROJECT: "robot-shop"

jobs:
  build-and-deploy:
    if: ${{ github.ref_name == 'develop' || github.ref_name == 'main' && github.actor != 'github-actions[bot]'}}
    runs-on: robot-shop-runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ env.GITHUB_PAT }}

    - name: Setup Helm
      uses: azure/setup-helm@v4.3.0
      with:
        version: 3.9.0

    - name: Configure git
      run: |
        git config user.name ${{ env.GITHUB_USERNAME }}
        git config user.email ${{ env.GITHUB_EMAIL }}
        git remote set-url origin https://x-access-token:${{ env.GITHUB_PAT }}@github.com/${{ env.GITHUB_USERNAME }}/robot-shop-cart-microservice.git
        git pull origin develop --rebase

    - name: Get latest docker image version
      id: version
      run: |
        image_tag=$GITHUB_SHA::8
        export "image_tag=$image_tag" > $GITHUB_OUTPUT

    - name: Login to ECR
      run: |
        aws ecr-public get-login-password \
          --region ${{ env.AWS_REGION_ECR }} | \
          docker login \
          --username AWS \
          --password-stdin ${{ env.ECR_URL }}     

    - name: Build docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }} .
        docker tag ${{ env.IMAGE_NAME }} public.ecr.aws/v1g8i1q6/robot-shop:${{ env.IMAGE_NAME }}-${{ steps.version.outputs.image_tag }}
    
    - name: Push docker image
      run: |
        docker push public.ecr.aws/v1g8i1q6/robot-shop:${{ env.IMAGE_NAME }}-${{ steps.version.outputs.image_tag }}

    - name: Check minikube connectivity
      run: |
        set -e
        if minikube status > /dev/null; then
          echo "✅ Minikube is running!"
        else
          echo "❌ Minikube is not running"
        fi

        if kubectl get nodes > /dev/null; then
          echo "✅ Minikube cluster is reachable"
        else
          echo "❌ Minikube cluster not reachable"
        fi

    - name: Find project namespace
      run: |
        if kubectl get ns ${{ env.PROJECT }}-dev > /dev/null; then
          echo "namespace=${{ env.PROJECT }}-dev" > $GITHUB_ENV
          echo "namespace_found=true" > $GITHUB_ENV
        fi

    - name: Create project namespace
      if: ${{ env.namespace_found != 'true'}}
      run: |
        set -e
        if kubectl create ns ${{ env.PROJECT }}-dev > /dev/null; then
          echo "✅ Namespace ${{ env.PROJECT }}-dev created."
          echo "namespace=${{ env.PROJECT }}-dev" > $GITHUB_ENV
        else
          echo "❌ Namespace ${{ env.PROJECT }}-dev failed to create."
        fi

    - name: Validate helm charts
      id: helmcharts
      run: |
        chart_path=$(find . -type d -name ".chart" -print -quit)
        if [ -z $chart_path]; then
          echo "Error: Helm chart directory not found"
          exit 1
        fi
        
        echo "chart_path=$chart_path" > $GITHUB_OUTPUT
        cd $chart_path
        helm lint