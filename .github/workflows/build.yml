name: Build and Deploy cart microservice

on:
  push:
    branches-ignore: main

env:
    AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    GITHUB_USERNAME: ${{ secrets.GIT_USERNAME }}
    GITHUB_EMAIL: ${{ secrets.GIT_EMAIL }}
    GITHUB_PAT: ${{ secrets.GIT_PAT }}
    ECR_URL: public.ecr.aws/v1g8i1q6 
    AWS_REGION: "ap-south-1"
    AWS_REGION_ECR: "us-east-1"
    IMAGE_NAME: cart-ms
    PROJECT: "robot-shop"
    RELEASE: cart-microservice

jobs:
  prepare:
    runs-on: robot-shop-runner
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ env.GITHUB_PAT }}

    - name: Setup Helm
      uses: azure/setup-helm@v4.3.0
      with:
        version: 3.9.0

  build:
    needs: prepare
    runs-on: robot-shop-runner
    steps:
    - name: Get latest docker image version
      id: version
      run: |
        image_tag=${GITHUB_SHA::8}
        echo "IMAGE_TAG=$image_tag" >> $GITHUB_OUTPUT

    - name: Login to ECR
      run: |
        aws ecr-public get-login-password \
          --region ${{ env.AWS_REGION_ECR }} | \
          docker login \
          --username AWS \
          --password-stdin ${{ env.ECR_URL }}     

    - name: Build docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }} .
        docker tag ${{ env.IMAGE_NAME }} ${{ env.ECR_URL }}/robot-shop:${{ env.IMAGE_NAME }}-${{ steps.version.outputs.IMAGE_TAG }}
    
    - name: Push docker image
      run: |
        docker push ${{ env.ECR_URL }}/robot-shop:${{ env.IMAGE_NAME }}-${{ steps.version.outputs.IMAGE_TAG }}

  deploy:
    if: ${{ github.ref_name == 'develop' || github.ref_name == 'main' }}
    needs: build
    runs-on: robot-shop-runner
    steps:
    - name: Check minikube connectivity
      run: |
        set -e
        if minikube status > /dev/null; then
          echo "✅ Minikube is running!"
        else
          echo "❌ Minikube is not running"
        fi

        if kubectl get nodes > /dev/null; then
          echo "✅ Minikube cluster is reachable"
        else
          echo "❌ Minikube cluster not reachable"
        fi

    - name: Find project namespace
      run: |
        if kubectl get ns ${{ env.PROJECT }}-dev > /dev/null; then
          echo "namespace=${{ env.PROJECT }}-dev" >> $GITHUB_ENV
          echo "namespace_found=true" >> $GITHUB_ENV
        fi

    - name: Create project namespace
      if: ${{ env.namespace_found != 'true'}}
      run: |
        set -e
        if kubectl create ns ${{ env.PROJECT }}-dev > /dev/null; then
          echo "✅ Namespace ${{ env.PROJECT }}-dev created."
          echo "namespace=${{ env.PROJECT }}-dev" >> $GITHUB_ENV
        else
          echo "❌ Namespace ${{ env.PROJECT }}-dev failed to create."
        fi

    - name: Validate helm charts
      id: helmcharts
      run: |
        chart_path=$(find . -type d -name ".chart" -print -quit)
        if [ -z $chart_path ]; then
          echo "Error: Helm chart directory not found"
          exit 1
        fi
        
        echo "chart_path=$chart_path" >> $GITHUB_OUTPUT
        cd $chart_path
        helm lint

    - name: Deploy with helm
      run: |
        helm upgrade ${{ env.RELEASE }} ${{ steps.helmcharts.outputs.chart_path }} \
        --namespace ${{ env.namespace }} --install --atomic \
        --set cart.container.image.repo=${{ env.ECR_URL }}/robot-shop \
        --set cart.container.image.version=${{ env.IMAGE_NAME }}-${{ needs.build.outputs.IMAGE_TAG }}

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/cart-deployment --namespace ${{ env.namespace }}
        kubectl rollout status statefulset/redis-statefulset --namespace ${{ env.namespace }}
        helm status ${{ env.RELEASE }} --namespace ${{ env.namespace }} --output table