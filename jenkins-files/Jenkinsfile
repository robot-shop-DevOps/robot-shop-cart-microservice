pipeline {
    agent any

    environment {
        git_url = 'https://github.com/robot-shop-DevOps/robot-shop-cart-microservice.git'
        ecr_url = 'public.ecr.aws/v1g8i1q6'
        aws_region_ecr = 'us-east-1'
        aws_creds = credentials('ECR_SA')
        image_name = 'cart-ms'       
    }
    
    stages {
        stage('Checking dependencies') {
            stages {
                stage('Check helm dependency') {
                    steps {
                        echo "Checking helm status"

                        sh '''
                            if helm version > /dev/null; then                                
                                echo "Helm is installed with version: $(helm --version)"
                            else
                                echo "Helm not installed!!! Aborting the job"
                                exit 1
                            fi
                        '''
                    }
                }

                stage('Check AWS CLI dependency') {
                    steps {
                        echo "Checking AWS CLI status"

                        sh '''
                            if aws --version > /dev/null; then                                
                                echo "AWS CLI is installed with version: $(aws --version)"
                            else
                                echo "AWS CLI not installed!!! Aborting the job"
                                exit 1
                            fi
                        '''
                    }
                }

                stage('Check docker dependency') {
                    steps {
                        echo "Checking docker status"

                        sh '''
                            if docker --version > /dev/null; then                                
                                echo "Docker is installed with version: $(docker --version)"
                            else
                                echo "Docker not installed!!! Aborting the job"
                                exit 1
                            fi
                        '''
                    }
                }

                stage('Check kind dependency') {
                    steps {
                        echo "Checking kind status"

                        sh '''
                            if kind version > /dev/null; then                                
                                echo "Kind is installed with version: $(kind version)"
                            else
                                echo "Kind not installed!!! Aborting the job"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }

        stage('Checkout code') {
            steps {
                echo "Checking out code from Git SCM"

                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '466bfd9a-0b0b-4602-9e7c-2351a7eefce2', url: env.git_url]])
            }
        }

        stage('Get latest docker image version') {
            steps {
                echo "Fetching latest docker image tag"

                script {
                    def commitSHA = env.GIT_COMMIT
                    def imageTag = commitSHA[0..7]
                    env.image_tag = imageTag
                }

                echo "Latest docker image tag: ${env.image_tag}"
            }
        }

        stage('Login to ECR') {
            steps {
                echo "Logging into ECR with service account"

                sh '''
                    aws ecr-public get-login-password \
                    --region $aws_region_ecr | \
                    docker login \
                    --username AWS \
                    --password-stdin $ecr_url   
                '''
            }
        }

        stage('Build docker image') {
            steps {
                echo "Building docker image"

                sh '''
                    docker build -t $image_name .
                    docker tag $image_name $ecr_url/robot-shop-pre/cart-ms:$image_tag
                '''
            }
        }

        stage('Push docker image') {
            steps {
                echo "Pushing docker image to ECR repo"

                sh '''
                    docker push $ecr_url/robot-shop-pre/cart-ms:$image_tag
                '''
            }
        }

        stage('Check Pre01 cluster connectivity') {
            steps {
                sh '''
                    if docker ps --filter 'name=pre01-control-plane' > /dev/null; then
                      echo "✅ Kind Pre01 control plane is running!"
                    else
                      echo "❌ Kind Pre01 control plane not reachable."
                    fi

                    if kubectl --context=kind-pre01 get nodes > /dev/null; then
                      echo "✅ Kind Pre01 node reachable."
                    else
                      echo "❌ Kind Pre01 node not reachable."
                    fi

                    if kubectl --context=kind-pre01 cluster-info > /dev/null; then
                      echo "✅ Pre01 cluster info - $(kubectl --context=kind-pre01 cluster-info)"
                    else
                      echo "❌ Pre01 cluster info not available."
                    fi
                '''
            }
        }

        stage('Check Pre02 cluster connectivity') {
            steps {
                sh '''
                    if docker ps --filter 'name=pre02-control-plane' > /dev/null; then
                      echo "✅ Kind Pre02 control plane is running!"
                    else
                      echo "❌ Kind Pre02 control plane not reachable."
                    fi

                    if kubectl --context=kind-pre02 get nodes > /dev/null; then
                      echo "✅ Kind Pre02 node reachable."
                    else
                      echo "❌ Kind Pre02 node not reachable."
                    fi

                    if kubectl --context=kind-pre02 cluster-info > /dev/null; then
                      echo "✅ Pre02 cluster info - $(kubectl --context=kind-pre02 cluster-info)"
                    else
                      echo "❌ Pre02 cluster info not available."
                    fi
                '''
            }
        }
    }
}